//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleApp1.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://fontysvenlo.org/BattleService", ConfigurationName="ServiceReference1.IGameContract", CallbackContract=typeof(ConsoleApp1.ServiceReference1.IGameContractCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IGameContract {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://fontysvenlo.org/BattleService/IGameContract/Logout")]
        void Logout(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://fontysvenlo.org/BattleService/IGameContract/Logout")]
        System.Threading.Tasks.Task LogoutAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://fontysvenlo.org/BattleService/IGameContract/Login", ReplyAction="http://fontysvenlo.org/BattleService/IGameContract/LoginResponse")]
        string Login(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://fontysvenlo.org/BattleService/IGameContract/Login", ReplyAction="http://fontysvenlo.org/BattleService/IGameContract/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://fontysvenlo.org/BattleService/IGameContract/GetAvailableGames", ReplyAction="http://fontysvenlo.org/BattleService/IGameContract/GetAvailableGamesResponse")]
        Models.GameInformation[] GetAvailableGames(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://fontysvenlo.org/BattleService/IGameContract/GetAvailableGames", ReplyAction="http://fontysvenlo.org/BattleService/IGameContract/GetAvailableGamesResponse")]
        System.Threading.Tasks.Task<Models.GameInformation[]> GetAvailableGamesAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://fontysvenlo.org/BattleService/IGameContract/JoinGame")]
        void JoinGame(string playerName, string gameId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://fontysvenlo.org/BattleService/IGameContract/JoinGame")]
        System.Threading.Tasks.Task JoinGameAsync(string playerName, string gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://fontysvenlo.org/BattleService/IGameContract/HostGame", ReplyAction="http://fontysvenlo.org/BattleService/IGameContract/HostGameResponse")]
        void HostGame(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://fontysvenlo.org/BattleService/IGameContract/HostGame", ReplyAction="http://fontysvenlo.org/BattleService/IGameContract/HostGameResponse")]
        System.Threading.Tasks.Task HostGameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://fontysvenlo.org/BattleService/IGameContract/ProvideShipPlacements")]
        void ProvideShipPlacements(string player, Models.Ship[] shipPlacements);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://fontysvenlo.org/BattleService/IGameContract/ProvideShipPlacements")]
        System.Threading.Tasks.Task ProvideShipPlacementsAsync(string player, Models.Ship[] shipPlacements);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://fontysvenlo.org/BattleService/IGameContract/ProvideShotPlacement")]
        void ProvideShotPlacement(string player, Models.Coordinate coordinate);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://fontysvenlo.org/BattleService/IGameContract/ProvideShotPlacement")]
        System.Threading.Tasks.Task ProvideShotPlacementAsync(string player, Models.Coordinate coordinate);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://fontysvenlo.org/BattleService/IGameContract/JoinBotGame")]
        void JoinBotGame(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://fontysvenlo.org/BattleService/IGameContract/JoinBotGame")]
        System.Threading.Tasks.Task JoinBotGameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://fontysvenlo.org/BattleService/IGameContract/Ready", ReplyAction="http://fontysvenlo.org/BattleService/IGameContract/ReadyResponse")]
        void Ready();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://fontysvenlo.org/BattleService/IGameContract/Ready", ReplyAction="http://fontysvenlo.org/BattleService/IGameContract/ReadyResponse")]
        System.Threading.Tasks.Task ReadyAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameContractCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://fontysvenlo.org/BattleService/IGameContract/ProvideIdentity")]
        void ProvideIdentity(string uuid);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://fontysvenlo.org/BattleService/IGameContract/GameRules")]
        void GameRules(Models.GameRuleSet gameRuleSet);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://fontysvenlo.org/BattleService/IGameContract/PlacementComplete")]
        void PlacementComplete(Models.Ship[] yourShips);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://fontysvenlo.org/BattleService/IGameContract/Shoot")]
        void Shoot();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://fontysvenlo.org/BattleService/IGameContract/PlaceShips")]
        void PlaceShips();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://fontysvenlo.org/BattleService/IGameContract/OpponentShot")]
        void OpponentShot(Models.Coordinate position, Models.FieldPosition[] fieldPositions);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://fontysvenlo.org/BattleService/IGameContract/ShotResult")]
        void ShotResult(Models.Coordinate position, Models.FieldPosition[] fieldPositions);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://fontysvenlo.org/BattleService/IGameContract/GameOver")]
        void GameOver(string winner);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://fontysvenlo.org/BattleService/IGameContract/Error")]
        void Error(string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameContractChannel : ConsoleApp1.ServiceReference1.IGameContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameContractClient : System.ServiceModel.DuplexClientBase<ConsoleApp1.ServiceReference1.IGameContract>, ConsoleApp1.ServiceReference1.IGameContract {
        
        public GameContractClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameContractClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameContractClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameContractClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameContractClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Logout(string id) {
            base.Channel.Logout(id);
        }
        
        public System.Threading.Tasks.Task LogoutAsync(string id) {
            return base.Channel.LogoutAsync(id);
        }
        
        public string Login(string userName) {
            return base.Channel.Login(userName);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string userName) {
            return base.Channel.LoginAsync(userName);
        }
        
        public Models.GameInformation[] GetAvailableGames(string id) {
            return base.Channel.GetAvailableGames(id);
        }
        
        public System.Threading.Tasks.Task<Models.GameInformation[]> GetAvailableGamesAsync(string id) {
            return base.Channel.GetAvailableGamesAsync(id);
        }
        
        public void JoinGame(string playerName, string gameId) {
            base.Channel.JoinGame(playerName, gameId);
        }
        
        public System.Threading.Tasks.Task JoinGameAsync(string playerName, string gameId) {
            return base.Channel.JoinGameAsync(playerName, gameId);
        }
        
        public void HostGame(string name) {
            base.Channel.HostGame(name);
        }
        
        public System.Threading.Tasks.Task HostGameAsync(string name) {
            return base.Channel.HostGameAsync(name);
        }
        
        public void ProvideShipPlacements(string player, Models.Ship[] shipPlacements) {
            base.Channel.ProvideShipPlacements(player, shipPlacements);
        }
        
        public System.Threading.Tasks.Task ProvideShipPlacementsAsync(string player, Models.Ship[] shipPlacements) {
            return base.Channel.ProvideShipPlacementsAsync(player, shipPlacements);
        }
        
        public void ProvideShotPlacement(string player, Models.Coordinate coordinate) {
            base.Channel.ProvideShotPlacement(player, coordinate);
        }
        
        public System.Threading.Tasks.Task ProvideShotPlacementAsync(string player, Models.Coordinate coordinate) {
            return base.Channel.ProvideShotPlacementAsync(player, coordinate);
        }
        
        public void JoinBotGame(string name) {
            base.Channel.JoinBotGame(name);
        }
        
        public System.Threading.Tasks.Task JoinBotGameAsync(string name) {
            return base.Channel.JoinBotGameAsync(name);
        }
        
        public void Ready() {
            base.Channel.Ready();
        }
        
        public System.Threading.Tasks.Task ReadyAsync() {
            return base.Channel.ReadyAsync();
        }
    }
}
